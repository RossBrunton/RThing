"""
Local settings for RThing

See settings.py or https://docs.djangoproject.com/en/1.6/ref/settings/ for more details on settings available
"""

import os
import sys

# Get base dir, you don"t need to change this
BASE_DIR = os.path.dirname(__file__)

# Generate using http://www.miniwebtool.com/django-secret-key-generator/
SECRET_KEY = ""

# Turn on if you want to debug something!
DEBUG = False

# Should the user be forbidden from using the prompt after they answer or skip the question
ANSWER_LOCK = True

# This text will be displayed in the footer
FOOTER = "This is footer text which hasn't been changed yet."

# A list of the allowed hosts this can run on
ALLOWED_HOSTS = []

# Set this to true if tests should use a sqlite database file rather than connecting to the server
TEST_SQLITE = True

# Email domain; when you create a new user their email will be set to "username@EMAIL_DOMAIN"
EMAIL_DOMAIN = "localhost"

# Mailing settings
# Host for sending e-mail.
EMAIL_HOST = "localhost"

# Port for sending e-mail.
EMAIL_PORT = 25

# Optional SMTP authentication information for EMAIL_HOST.
EMAIL_HOST_USER = ""
EMAIL_HOST_PASSWORD = ""
EMAIL_USE_TLS = False

# Languages and their packages
IFACES = {
    "dummy":("Dummy Interface", "ifaces.dummy"),
    "r":("R", "ifaces.r"),
}

# Default interface name
IFACE_DEF = "r"

# Set your web server to serve the files in STATIC_ROOT from STATIC_URL
STATIC_ROOT = os.path.join(BASE_DIR, "collectedstatic")
STATIC_URL = "/static/"

# And serve files from MEDIA_ROOT with MEDIA_URL
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# If your server sets REMOTE_USER to a username, setting this to true disables the login form and uses REMOTE_USER
# instead
USE_REMOTE_USER = False

# This message will be displayed if the user could not be authenticated, it should contain a link to where they can log
# in and maybe someone they can contact. Accepts HTML.
REMOTE_DENIED_MESSAGE = "Sorry, you need to log on to this site before you can access this."

# This is called to "clean" the remote user"s username. By default this chops off everything after an "@" if it exists
def CLEAN_REMOTE(self, username):
    if "@" in username:
        return username.split("@")[0]
    
    return username

# Files to copy into the sandbox on its creation
R_FILES = [
    "/usr/bin/R", "/usr/bin/Rscript", "/usr/bin/less", "/bin/sh", "/bin/bash", "/bin/uname", "/bin/sed", "/bin/rm",
    "/bin/cat"
]
# Files that are bound in the chroot. What is required here varies wildly; try /lib and /etc if you get file not found
# All files in these folders will be visible from the system (using ls, for example), and they may be able to delete
# them if for some reason they are world writable or the sandbox user can write them
R_BOUND = [
    "/usr/lib64/R", "/usr/lib64/", "/lib64"
]
