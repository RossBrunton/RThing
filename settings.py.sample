"""
Django settings.

For more information on this file, see
https://docs.djangoproject.com/en/1.6/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.6/ref/settings/
"""

import os
import sys

# Get base dir, you don't need to change this
BASE_DIR = os.path.dirname(__file__)

#####
#####
# Change the following
#####
#####

# Generate using http://www.miniwebtool.com/django-secret-key-generator/
SECRET_KEY = ''

# Turn on if you want to debug something!
DEBUG = False

# Should the user be forbidden from using the prompt after they answer or skip the question
ANSWER_LOCK = True

# A list of the allowed hosts this can run on
ALLOWED_HOSTS = []

# Set this to true if tests should use a sqlite database file rather than connecting to the server
TEST_SQLITE = True

# Email domain; when you create a new user their email will be set to "username@EMAIL_DOMAIN"
EMAIL_DOMAIN = "localhost"

# Mailing settings
# Host for sending e-mail.
EMAIL_HOST = 'localhost'

# Port for sending e-mail.
EMAIL_PORT = 25

# Optional SMTP authentication information for EMAIL_HOST.
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_USE_TLS = False

# Languages and their packages
IFACES = {
    "dummy":("Dummy Interface", "ifaces.dummy"),
    "r":("R", "ifaces.r"),
}

# Default interface name
IFACE_DEF = "r"

# Set your web server to serve the files in STATIC_ROOT from STATIC_URL
STATIC_ROOT = os.path.join(BASE_DIR, 'collectedstatic')
STATIC_URL = '/static/'

# And serve files from MEDIA_ROOT with MEDIA_URL
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# If your server sets REMOTE_USER to a username, setting this to true disables the login form and uses REMOTE_USER
# instead
USE_REMOTE_USER = False

# This message will be displayed if the user could not be authenticated, it should contain a link to where they can log
# in and maybe someone they can contact. Accepts HTML.
REMOTE_DENIED_MESSAGE = "Sorry, you need to log on to this site before you can access this."

# This is called to "clean" the remote user's username. By default this chops off everything after an "@" if it exists
def CLEAN_REMOTE(self, username):
    if "@" in username:
        return username.split("@")[0]
    
    return username

# What files/dirs R needs to see (use ldd)
# Copy these files
R_FILES = [
    '/usr/bin/R', '/usr/bin/Rscript', '/usr/bin/less', '/bin/sh', '/bin/bash', '/bin/uname', '/bin/sed', '/bin/rm',
    '/bin/cat'
]
# Files that are bound in the chroot. What is required here varies wildly; try /lib and /etc if you get file not found
# All files in these folders will be visible from the system (using ls, for example), and they may be able to delete
# them if for some reason they are world writable or the sandbox user can write them
R_BOUND = [
    '/usr/lib64/R', '/usr/lib64/', '/lib64'
]

#####
#####
# You probably don't want to change anything below this line
#####
#####

TEMPLATE_DEBUG = DEBUG

# Application definition
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ordered_model',
    'rthing',
    'courses',
    'tasks',
    'stats',
    'staff',
    'users',
    'ifaces',
    'export'
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
)

if USE_REMOTE_USER:
    MIDDLEWARE_CLASSES = MIDDLEWARE_CLASSES + ('django.contrib.auth.middleware.RemoteUserMiddleware')

ROOT_URLCONF = 'rthing.urls'
WSGI_APPLICATION = 'wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.6/ref/settings/#databases
if "test" in sys.argv and TEST_SQLITE:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'testingdb.sqlite',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'OPTIONS': {'read_default_file':os.path.join(BASE_DIR, 'db.cnf')},
        }
    }


# Caches
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
        'TIMEOUT':60*60, # An hour
    }
}

# Auth backets
if USE_REMOTE_USER:
    AUTHENTICATION_BACKENDS = (
        'users.backends.CustomRemoteUserBackend',
    )
else:
    # Use default
    pass

# Template processors
TEMPLATE_CONTEXT_PROCESSORS = (
    "django.contrib.auth.context_processors.auth",
    "django.core.context_processors.debug",
    "django.core.context_processors.i18n",
    "django.core.context_processors.media",
    "django.core.context_processors.static",
    "django.core.context_processors.tz",
    "django.contrib.messages.context_processors.messages",
    "users.context_processors.use_remote_checker",
)

# Internationalization (not in use)
# https://docs.djangoproject.com/en/1.6/topics/i18n/
LANGUAGE_CODE = 'en-gb'
TIME_ZONE = 'UTC'
USE_I18N = False
USE_L10N = False
USE_TZ = False

# Directiories
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]
TEMPLATE_DIRS = [
    os.path.join(BASE_DIR, "templates")
]

# URLs
LOGIN_URL = "users:login"
LOGOUT_URL = "users:logout"

# More directories
NAMESPACE_DIR = os.path.join(BASE_DIR, "namespaces")
SANDBOX_DIR = os.path.join(BASE_DIR, "sandboxes")
MOUNT_DIR = os.path.join(BASE_DIR, "mnt")
